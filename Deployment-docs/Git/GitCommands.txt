>>>>>>>>>>>>>>>>> TO REVERT GIT COMMIT LOCALLY : 

	Delete the most recent commit, keeping the work you've done in unstaged section:
		git reset HEAD~1

	Delete the most recent commit, keeping the work you've done in staged section:
		git reset --soft HEAD~1

	Delete the most recent commit, destroying the work you've done:
		git reset --hard HEAD~1
		
		git reset --soft HEAD~2 // to go back two commits

		
>>>> GIT UNSTAGE ALL CHANGES
		git reset
		
*****************************************************************		
>  NOTE : git add <file name>  ## command stage the untracked file or tracked files for git
>  NOTE : git add -a           ##stage all the files that are already tracked but will not add the untracked files (like newly added folders and files )		

>  NOTE : git commit -m "<message>" | git push

*******************************************************************
> Clear git tracked file list : git rm --cached 

******************************************************************
git add -A ## stages All

git add . ## stages new and modified, without deleted

git add -u ## stages modified and deleted, without new

******************************************************************

git reset --hard HEAD
completely remove all staged and unstaged changes to tracked files.
I find myself often using hard resetting, when I'm like "just undo everything like if I had done a complete re-clone from the remote". In your case, where you just want your repo pristine, this would work.

git clean -f
Remove files that are not tracked.

git checkout .
undo unstaged changes in tracked files. It apparently doesn't touch staged changes and leaves untracked files alone.

git checkout -- .: Jump back to the last Commit and remove any untracked changes


Generally, if you are confident you have committed and maybe pushed to a remote important changes, if you are just playing around or the like, using git reset --hard HEAD followed by git clean -f will definitively cleanse your code to the state, it would be in, had it just been cloned and checked out from a branch. It's really important to emphasize, that the resetting will also remove staged, but uncommitted changes. It will wipe everything that has not been committed (except untracked files, in which case, use clean).

All the other commands are there to facilitate more complex scenarios, where a granularity of "undoing stuff" is needed :)

I feel, your question #1 is covered, but lastly, to conclude on #2: the reason you never found the need to use git reset --hard was that you had never staged anything. Had you staged a change, neither  git checkout . nor git clean -f would have reverted that.
