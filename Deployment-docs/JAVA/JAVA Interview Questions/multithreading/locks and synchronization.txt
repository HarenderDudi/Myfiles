SYNCHRONOUS

Internally Java uses a so called monitor also known as monitor lock or intrinsic lock in order to manage synchronization. 
This monitor is bound to an object, e.g. when using synchronized methods each method share the same monitor of the corresponding object.
All implicit monitors implement the reentrant characteristics. Reentrant means that locks are bound to the current thread. 
A thread can safely acquire the same lock multiple times without running into deadlocks (e.g. a synchronized method calls another synchronized method on the same object).

ReentrantLock

The class ReentrantLock is a mutual exclusion lock with the same basic behavior as the implicit monitors accessed via the synchronized keyword but with extended capabilities.
The method tryLock() as an alternative to lock() tries to acquire the lock without pausing the current thread. 

ReadWriteLock

The interface ReadWriteLock specifies another type of lock maintaining a pair of locks for read and write access.
So the read-lock can be held simultaneously by multiple threads as long as no threads hold the write-lock.

Difference b/w lock and synchronization
synchronization: blocked
lock: could be non blocking (eg: use tryLock())

https://winterbe.com/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/