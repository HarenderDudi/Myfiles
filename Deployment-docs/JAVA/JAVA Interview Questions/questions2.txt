final list and final class (done)
accessors (done)
finalize keyword(done)
GC(done)
final method (done)
object as key in hashmap(done)
equals and hashcode(done)

sorting using arraylist of object and sorting using treeMap (done)
create immutable class..why its final, other immutable classes
create singleton
why we need primitive, autoboxing

executor service and thread **
runnable vs callable
locks

Composition, substitution 
Enum

HTTP code
path variable and query parameter


** string buffer vs stringbuilder
** checked and unchecked, explain heierarcy of exception
** abstraction and encapsulation
** overloading and overridding
** how syncronization block works
** serialization, transient and volatile and atomic
** delete drop truncate
** what is hashing and how it is fast
** what is rest service and create a example
** linkedlist vs array 
** what is REST and SOAP

Credit sussies
	Gradle how not build perticular projects
	why we need interfaces if we have abstract classes
	design pattern with example
	add a emp(with one field 'name') with name in a 'set'
	how to synchronize a method in a class for all its instances
	final and static in threads
	nested class
	GC(if a class has List of constants and there is instance of that class, then it will marked for GC or not)
	SQL query for 4th highest salary
	how to make method as a transaction in spring
	
	
	

coding
- reverse string


