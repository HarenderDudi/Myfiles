include 'docker'
import 'mymodule'

class save_docker_images {

  exec { 'save docker images':
    command => 'docker save -o /etc/puppet/modules/mymodule/files/DockerImages/orientdb broadinstitute/orientdb  && docker save -o /etc/puppet/modules/mymodule/files/DockerImages/jetty jetty',
    path => ["/usr/bin", "/usr/sbin"],
    user => root,
   }
}

class load_docker_images {

  exec { 'load docker images':
    command => 'docker load -i /home/inbetween/DockerImages/ubuntu',
    path => ["/usr/bin", "/usr/sbin"],
    user => root,
   }
}


node 'puppet' {
        include save_docker_images
}

node 'agent1' {
        include myfile

        exec { 'stop all containers':
                command => 'docker stop $(docker ps -a) && docker rm $(docker ps -a) && docker rmi $(docker images -a)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,

         }

         exec { 'load orientdb containers':
                command => 'docker load -i /home/inbetween/DockerImages/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,

         }

		 
         exec { 'load jetty containers':
                command => 'docker load -i /home/inbetween/DockerImages/jetty',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,

         }
}

node default {}





****************************************************************************************************************************


include 'docker'
import 'mymodule'

class save_docker_images {

  exec { 'save docker images':
    command => 'docker save -o /etc/puppet/modules/mymodule/files/DockerImages/orientdb broadinstitute/orientdb  && docker save -o /etc/puppet/modules/mymodule/files/DockerImages/jetty jetty',
    path => ["/usr/bin", "/usr/sbin"],
    user => root,
   }
}

class load_docker_images {

  exec { 'load docker images':
    command => 'docker load -i /home/inbetween/DockerImages/ubuntu',
    path => ["/usr/bin", "/usr/sbin"],
    user => root,
   }
}


node 'puppet' {
        include save_docker_images
}

node 'agent1' {
        include myfile

        exec { 'stop all containers':
                command => 'docker stop $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
         }
		 
		exec { 'remove all containers':
                command => 'docker rm $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
         }

        exec { 'remove all images':
                command => 'docker rmi jetty && docker rmi broadinstitute/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
                notify  => Exec["load orientdb containers"],
        }

         exec { 'load orientdb containers':
                command => 'docker load -i /home/inbetween/DockerImages/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                require => Exec['remove all images'],

         }

         exec { 'load jetty containers':
                command => 'docker load -i /home/inbetween/DockerImages/jetty',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                require => Exec['remove all images'],
         }

        docker::run { 'jetty':
                 image   => 'jetty',
        }

        docker::run { 'orientdb':
                 image   => 'broadinstitute/orientdb',
        }
}

node default {}
		 
		 
***********************************************************************************************************************

include 'docker'
import 'mymodule'

class save_docker_images {

  exec { 'save docker images':
    command => 'docker save -o /etc/puppet/modules/mymodule/files/DockerImages/orientdb broadinstitute/orientdb  && docker save -o /etc/puppet/modules/mymodule/files/DockerImages/jetty jetty',
    path => ["/usr/bin", "/usr/sbin"],
    user => root,
   }
}

class stop_all_containers {
        exec { 'stop all containers':
                command => 'docker stop $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
         }
}

class remove_all_containers {
        exec { 'remove all containers':
                command => 'docker rm $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
         }
}

class remove_all_images {
        exec { 'remove all images':
                command => 'docker rmi jetty && docker rmi broadinstitute/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
                notify  => Exec["load orientdb containers"],
        }
}

class load jetty_image {
        exec { 'load jetty containers':
                command => 'docker load -i /home/inbetween/DockerImages/jetty',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
         }
}

class load_orientdb_image {
        exec { 'load orientdb containers':
                command => 'docker load -i /home/inbetween/DockerImages/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
         }
}

class run_jetty_container {
        docker::run { 'jetty':
                 image   => 'jetty',
        }
}

class run_orientdb_container {
        docker::run { 'orientdb':
                 image   => 'broadinstitute/orientdb',
        }
}

node 'puppet' {
        include save_docker_images
}

node 'agent1' {
        include myfile
}

node default {}

		 
******************************************************************************************************************


include 'docker'
import 'mymodule'

class save_docker_images {

    exec { 'save docker images':
    command => 'docker save -o /etc/puppet/modules/mymodule/files/DockerImages/orientdb broadinstitute/orientdb  && docker save -o /etc/puppet/modules/mymodule/files/DockerImages/jetty jetty',
    path    => ['/usr/bin', '/usr/sbin'],
    user    => root,
   }
}

class stop_all_containers {
        exec { 'stop all containers':
                command => 'docker stop $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
                notify => Exec["remove_all_containers"],
         }
}

class remove_all_containers {
        exec { 'remove all containers':
                command => 'docker rm $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
         }
}

class remove_all_images {
        exec { 'remove all images':
                command => 'docker rmi jetty && docker rmi broadinstitute/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
                notify  => Exec["load orientdb containers"],
        }
}


class load_jetty_image {
        exec { 'load jetty containers':
                command => 'docker load -i /home/inbetween/DockerImages/jetty',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
         }
}

class load_orientdb_image {
        exec { 'load orientdb containers':
                command => 'docker load -i /home/inbetween/DockerImages/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
         }
}

class run_jetty_container {
        docker::run { 'jetty':
                 image   => 'jetty',
        }
}

class run_orientdb_container {
        docker::run { 'orientdb':
                 image   => 'broadinstitute/orientdb',
        }
}


node 'puppet' {
        include save_docker_images
}

node 'agent1' {
        include myfile

        exec { 'stop all containers':
                command => 'docker stop $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
         } ->
         exec { 'remove all containers':
                command => 'docker rm $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
         } -> exec { 'remove all images':
                command => 'docker rmi jetty && docker rmi broadinstitute/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                logoutput => false,
                notify  => Exec["load orientdb containers"],
        } -> exec { 'load orientdb containers':
                command => 'docker load -i /home/inbetween/DockerImages/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                require => Exec['remove all images'],

         } -> exec { 'load jetty containers':
                command => 'docker load -i /home/inbetween/DockerImages/jetty',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                require => Exec['remove all images'],
         } -> docker::run { 'jetty':
                 image   => 'jetty',
         } -> docker::run { 'orientdb':
                 image   => 'broadinstitute/orientdb',
         }
}

node default {}		 



****************************************************************************************************************

import 'mymodule'
import 'save_docker_images'

node 'puppet' {
        include 'docker'
        include 'git'

        docker::image { 'jetty':
                  ensure => 'absent'
        } ->
        docker::image { 'orientdb':
                 ensure => 'absent'
        } ->
        docker::image { 'elasticsearch':
                  ensure => 'absent'
        } ->
        exec { 'jetty':
                command => 'docker build -t jetty /GitRepository/ContentSphere/deployment/dockerfiles/jettycluster/jetty/',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
        exec { 'orientdb':
                command => 'docker build -t orientdb /GitRepository/ContentSphere/deployment/dockerfiles/orientdbcluster/orientdb/',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
        exec { 'elasticsearch':
                command => 'docker build -t elasticsearch /GitRepository/ContentSphere/deployment/dockerfiles/elasticcluster/elasticsearch/',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } -> class {'save_docker_images':}

        #include save_docker_images
}

node 'agent1' {
        include myfile
        include 'docker'


        exec { 'stop all containers':
                command => 'docker stop $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                onlyif => "docker stop $(docker ps -a -q)",
                logoutput => false,
        } ->
        exec { 'remove all containers':
                command => 'docker rm jetty orientdb elasticsearch',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                onlyif => "docker rm -f $(docker ps -a -q)",
                logoutput => false,
        }

        docker::image { 'jetty':
                  ensure => 'absent'
        } ->
        docker::image { 'orientdb':
                 ensure => 'absent'
        } ->
        docker::image { 'elasticsearch':
                  ensure => 'absent'
        } ->
        exec { 'load orientdb containers':
                command => 'docker load -i /home/inbetween/DockerImages/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
		exec { 'load jetty containers':
                command => 'docker load -i /home/inbetween/DockerImages/jetty',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
        exec { 'load elasticsearch containers':
                command => 'docker load -i /home/inbetween/DockerImages/elasticsearch',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
        docker::run { 'jetty':
                 image   => 'jetty',
        } ->
        docker::run { 'orientdb':
                 image   => 'orientdb',
        } ->
        docker::run { 'elasticsearch':
                 image   => 'elasticsearch',
        }
}

node default {}
                
				
				
***************************************************************************************************************************

import 'mymodule'
import 'save_docker_images'

node 'puppet' {
        include 'docker'
        include 'git'


         exec { 'stop all containers':
                command => 'docker stop $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                onlyif => "docker stop $(docker ps -a -q)",
                logoutput => false,
        } ->
        exec { 'remove all containers':
                command => 'docker rm jetty orientdb elasticsearch',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                onlyif => "docker rm jetty orientdb elasticsearch",
                logoutput => false,
        }

        docker::image { 'jetty':
                  ensure => 'absent'
        } ->
        docker::image { 'orientdb':
                 ensure => 'absent'
        } ->
        docker::image { 'elasticsearch':
                  ensure => 'absent'
        } ->
        exec { 'jetty':
                command => 'docker build -t jetty /GitRepository/ContentSphere/deployment/dockerfiles/jettycluster/jetty/',
                path => ["/usr/bin", "/usr/sbin"],
                timeout => 1800,
                user => root,
        } ->
        exec { 'orientdb':
                command => 'docker build -t orientdb /GitRepository/ContentSphere/deployment/dockerfiles/orientdbcluster/orientdb/',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
		exec { 'elasticsearch':
                command => 'docker build -t elasticsearch /GitRepository/ContentSphere/deployment/dockerfiles/elasticcluster/elasticsearch/',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
        docker::run { 'jetty':
                 image => 'jetty',
                 ports => '8080',
                 expose => '8080',
        } ->
        docker::run { 'orientdb':
                 image   => 'orientdb',
                 ports => '2480',
                 expose => '2480',
        } ->
        docker::run { 'elasticsearch':
                 image   => 'elasticsearch',
                 ports => '9200',
                 expose => '9200',
        }

}

node 'agent1' {
        include myfile
        include 'docker'


        exec { 'stop all containers':
                command => 'docker stop $(docker ps -a -q)',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                onlyif => "docker stop $(docker ps -a -q)",
                logoutput => false,
        } ->
        exec { 'remove all containers':
                command => 'docker rm jetty orientdb elasticsearch',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
                onlyif => "docker rm -f $(docker ps -a -q)",
                logoutput => false,
        }		
		
		 docker::image { 'jetty':
                  ensure => 'absent'
        } ->
        docker::image { 'orientdb':
                 ensure => 'absent'
        } ->
        docker::image { 'elasticsearch':
                  ensure => 'absent'
        } ->
        exec { 'load orientdb containers':
                command => 'docker load -i /home/inbetween/DockerImages/orientdb',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
        exec { 'load jetty containers':
                command => 'docker load -i /home/inbetween/DockerImages/jetty',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
        exec { 'load elasticsearch containers':
                command => 'docker load -i /home/inbetween/DockerImages/elasticsearch',
                path => ["/usr/bin", "/usr/sbin"],
                user => root,
        } ->
        docker::run { 'jetty':
                 image   => 'jetty',
        } ->
        docker::run { 'orientdb':
                 image   => 'orientdb',
        } ->
        docker::run { 'elasticsearch':
                 image   => 'elasticsearch',
        }
}

node default {}



******************************************************************************

node 'puppet' {
        class { '::nagios::server':
                apache_httpd_ssl             => false,
                apache_httpd_conf_content    => template('apache_httpd/httpd-nagios.conf.erb'),
                apache_httpd_htpasswd_source => 'puppet:///modules/nagios_passwd/htpasswd',
                cgi_authorized_for_system_information        => '*',
                cgi_authorized_for_configuration_information => '*',
                cgi_authorized_for_system_commands           => '*',
                cgi_authorized_for_all_services              => '*',
                cgi_authorized_for_all_hosts                 => '*',
                cgi_authorized_for_all_service_commands      => '*',
                cgi_authorized_for_all_host_commands         => '*',
                cgi_default_statusmap_layout                 => '3',
}
}

node 'agent1' {
        class { '::nagios::client':
                 nrpe_allowed_hosts => '127.0.0.1,192.168.1.1',
}
}

                       