// https://www.youtube.com/channel/UCiz26UeGvcTy4_M3Zhgk7FQ
// https://javarevisited.blogspot.com/2011/06/volatile-keyword-java-example-tutorial.html
// ** http://tutorials.jenkov.com/java-concurrency/
// ** http://tutorials.jenkov.com/java-util-concurrent/java-future.html

Thread is execution of sequence of programmed instruction.

Java provides different constructs to provide synchronization and locking e.g. volatile keyword, atomic variable, explicitly locking 
using java.util.concurrent.lock.Lock interface and there popular implementations e.g. ReentrantLock and ReentrantReadWriteLock,

Read more: https://javarevisited.blogspot.com/2011/04/synchronization-in-java-synchronized.html#ixzz6DLKrdrom

Callable vs Runnable
===============================
	-----------------------------------------------------------------------------------------------
	Runnable has run() method				|  		callable has call() method
	run() does not return any value  		|		call() method return value
	run() does not throw checked exception  | 		call() method does not throw checked exception
	-----------------------------------------------------------------------------------------------
	
	There is one limitation while using Callable interface in Java that you cannot pass it to Thread as you pass the Runnable instance
	So in order to execute a Callable instance you need to use the ExecutorService interface

	%%%
	Callable<Integer> callable = new Summation(a,b);
	    
	ExecutorService exec = Executors.newFixedThreadPool(3);
	    
	Future<Integer> future = exec.submit(callable);
	    
	try {
		int result = future.get();
		System.out.println(a + " + " + b + " = " + result); 
	} 
	catch (Exception e) {
		System.out.println("The error is: " + e);
	}
	%%%%
	
Java future
===============================
	Java Future represents the result of an asynchronous task
	
	public interface Future<V> {
		boolean cancel(boolean mayInterruptIfRunning)
		V       get();
		V       get(long timeout, TimeUnit unit);
		boolean isCancelled();
		boolean isDone();
	}
	
	If you call the get() method before the asynchronous task has completed, the get() method will block until the result is ready.


synchronization
===============================
	In a multi-threaded environment if object is shared among multiple threads that changes objects state, then this may lead to unexcepted
	behaviour, synchronization ensure mutually exclusive access to the shared resource.

	Whenever a thread enters into java synchronized method or blocks it acquires a lock and whenever it leaves java synchronized method or block it releases the lock. 
	The lock is released even if thread leaves synchronized method after completion or due to any Error or Exception
	
	Java synchronized keyword is re-entrant in nature it means if a java synchronized method calls another synchronized method which requires the same lock 
	then the current thread which is holding lock can enter into that method without acquiring the lock
	
	Synchronization will throw NullPointerException if object used in java synchronized block is null e.g. synchronized (myInstance) will throw 
	java.lang.NullPointerException if myInstance is null
	
	It's possible that both static synchronized and non-static synchronized method can run simultaneously or concurrently because they lock on the different object

	you can not use Java synchronized keyword with constructor

	You cannot apply java synchronized keyword with variables

	Important method related to synchronization in Java are wait(), notify() and notifyAll()

	Do not synchronize on the non-final field on synchronized block in Java. because the reference of the non-final field may change anytime 
	and then different thread might synchronizing on different objects i.e. no synchronization at all.

	private String lock = new String("lock");
	synchronized(lock){
		System.out.println("locking on :"  + lock);
	}

	It's not recommended to use String object as a lock in java synchronized block  as string gets stored in String pool. so by any chance if any other part of the code 
	or any third party library used same String as there lock then they both will be locked on the same object despite being completely unrelated which could result in 
	unexpected behavior and bad performance
	
	Disadvantage:
		One Major disadvantage of Java synchronized keyword is that it doesn't allow concurrent read
	
		If you have more than one JVM and need to synchronize access to a shared file system or database, the Java synchronized keyword is not at all sufficient. 
		You need to implement a kind of global lock for that
	
		if one thread is waiting for lock then there is no way to timeout, the thread can wait indefinitely for the lock, there is no way to interrupt the thread

		Java synchronized keyword incurs a performance cost
		
		
DeadLocks
===================================

	What is a deadlock: when two or more threads are waiting for each other to release the resource they need (lock) and get stuck for infinite time, the situation is called deadlock
	
	Detect deadlock: look at the code if I see a nested synchronized block or calling one synchronized method from other, 
					 or trying to get a lock on a different object then there is a good chance of deadlock
	
	public void method1() { 
		synchronized (String.class) { 
			System.out.println("Aquired lock on String.class object"); 
			
			synchronized (Integer.class) { 
				System.out.println("Aquired lock on Integer.class object"); 
			} 
		} 
	}
	
	public void method2() { 
		synchronized (Integer.class) { 
			System.out.println("Aquired lock on Integer.class object"); 
			
			synchronized (String.class) { 
				System.out.println("Aquired lock on String.class object"); 
			} 
		} 
	}
	
	Solution: same order of accuring lock in both methods

wait(), notify(), notifyAll()
===============================

	wait()-It tells the calling thread to give up the lock and go to sleep until some other thread enters the same monitor and calls notify() or its waiting time is over.
	notify()-It wakes up one single thread that called wait() on the same object. It should be noted that calling notify() does not actually give up a lock on a resource.
	notifyAll()-It wakes up all the threads that called wait() on the same object.
	
	Always call wait(), notify() and notifyAll() methods from synchronized method or synchronized block otherwise JVM will throw IllegalMonitorStateException.
	
	Always call wait and notify method from a loop and never from if() block, because loop test waiting condition before and after sleeping and handles notification 
	even if waiting for the condition is not changed.
	
	Always call wait in shared object e.g. shared queue in this example
	
	Code
	------
	
	workToDo = false
	Consumer
	--------
		synchronized(obj) {
			while(!workToDo){
				obj.wait();
			}
			// get next item from queue
			// work = obj.fetch();
			workToDo = false;
		}
		// work on the item
		
	producer
	---------
		synchronized(obj){
			if(!workToDo){
				// add work to queue
				workToDo = true;
			}
			obj.notifyAll();
		}		
	// https://javarevisited.blogspot.com/2015/07/how-to-use-wait-notify-and-notifyall-in.html
	
	
	Why use loop for wait()
	------------------------------
		synchronized (queue) {
			// this needs to be while
			while (queue.isEmpty()) {
				queue.wait();
			}
			queue.remove();
		}
	
	Reasons: Spurious wakeups and race conditions
	
	Spurious wakeups: 
		applications must guard against it by testing for the condition that should have caused the thread to be awakened.
	
	Race condition:
		If you use the if block then you are not going to check the waiting condition again before start processing or adding another item in the queue
		
		There is another scenario, where multiple producers are waiting for a spot in the queue. If a user called notifyAll() and informed all waiting threads 
		about the one spot being available. After receiving this notification, one of the thread will go for it and fill that spot but when other thread gets wake-up 
		the spot is already filled. If you don't check the condition in the loop then you end up adding more elements in the already full queue.
		
		When you check the waiting condition in the loop you ensure that thread will test the condition after it wakes up to see if the condition still holds or not.
		
		** another explanation for race condition**
		race condition
		Here is a more specific enumeration of the race condition. It shows the interaction of 2 consumer threads (getter-A and getter-C) a single producer thread (putter-B).

		getter A is waiting for there to be items in the queue (line #32)
		putter B locks the lock (line #55)
		getter C finishes the last item, calls get(), tries to lock the lock, waits for B to unlock (line #26)
		putter B adds an item into the queue and signals that there is an item there (line #73)
		getter A is awoken and tries to lock the lock, has to wait for B to unlock (after line #32), it is behind C in the queue of threads waiting to lock
		putter B unlocks (line #75)
		getter C is ahead of getter A waiting for lock so it is given the lock first (line #26)
		getter C dequeues the item that getter A was signaled for (!!), and then unlocks (line #49)
		getter A is finally able to lock, goes forward and calls remove on an empty list (line #41) which throws an exception
		
		The race is between getter A and C on who is able to get the lock first to dequeue the new item. The race condition is solved by changing lines 29 and 58 
		from if statements to while statements. Once getter A gets the lock it would check again to see if items is empty and would go back to waiting if C had already dequeued. 
		The producer would also check again to see if the list is at capacity.

	
Volatile
===============================
	volatile keyword is used to mark a Java variable as "being stored in main memory". that means, that every read of a volatile variable 
	will be read from the computer's main memory, and not from the CPU cache, and that every write to a volatile variable will be written 
	to main memory, and not just to the CPU cache
	
	Usage: when oonly one thread is writing and all other are reading
	
Thread Local
===============================
	Java ThreadLocal class provides thread-local variables. If two threads are executing the same code and that code has a reference to a 
	ThreadLocal variable then the two threads can't see the local variable of each other
	

ReentrantLock
===============================
	ReentrantLock are explicit locks

	ReentrantLock lock = new ReentrantLock(true) --> true is flag if log is fair or not i.e if T1 has lock and T2,T3 are in waiting queue, at the time of releasing lock by T1
													 at the same time T4 comes then lock will be given to T4 instead of putting in waiting queue, that is unfair lock


ReadWriteLock
===============================
	The interface ReadWriteLock specifies another type of lock maintaining a pair of locks for read and write access.
	So the read-lock can be held simultaneously by multiple threads as long as no threads hold the write-lock.
	
	ReadWriteLock rwLock = new ReentrantReadWriteLock();
	Lock readLock = rwLock.readLock();
	Lock writeLock = rwLock.writeLock();
	
	
	readLock.lock();
 
	try {
		// reading data
	} finally {
	 
		readLock.unlock();
	}
	
	
	
	writeLock.lock();
 
	try {
		// update data
	} finally {
	 
		writeLock.unlock();
	}
												 
													 
Lock's condition class
===============================
	
	its same like wait and notify and should be handled accordingly i.e inside while loop
	
	Lock lock = new ReentrantLock()
	Condition condition = lock.newCondition();
	
	public void m1(){
		lock.lock();
		try{
			condition.await() // suspend here
			// resumes here after signal
		}
		finally{
			lock.unlock();
		}
	}
	
	public void m1(){
		lock.lock();
		try{
			// do some operations
			condition.signal();
		}
		finally{
			lock.unlock();
		}
	}

CountdownLatch, cyclicBarrier
===================================
	CountdownLatch - Main thread wait(latch.await()) untill number of thread would call the latch.countdown(). 
	cyclicBarrier - Threads will wait for each other untill all the threads will reach barrier.await() call;

	
synchronization vs ReentrantLock
===================================
	synchronization are implicit locking and reentrantLock are explicit lock
	
	With synchronized keyword there is no way you can take the lock to another method. ReentrantLock solves this problem by providing control of acquiring and releasing the lock, 
	which means you can acquire the lock in method A and can release in method B if they both needs to be locked in same object lock
	
	Any thread trying to acquire a lock using synchronized method will block indefinitely until the lock is available. 
	Instead this, tryLock() method of ReentrantLock will not block if the lock is not available
	
	In locks we need to handle unlocking while synchronization it is handled by JVM.
	
	Prefer ReentrantLock over synchronized keyword, it provides more control on lock acquisition, lock release, and better performance compared to synchronized keyword
	
	
ExecutorService
===================================
	ExecutorService interface represents an asynchronous execution mechanism which is capable of executing tasks concurrently in the background
	
	The newFixedThreadPool () returns a ThreadPoolExecutor instance with an initialized and unbounded queue and a fixed number of threads.
	The newCachedThreadPool () returns a ThreadPoolExecutor instance initialized with an unbounded queue and unbounded number of threads.
	
	In the 1st case no extra thread is created during execution. So if there is no free thread available the task has to wait and then execute when one thread is free. 
	In the 2nd case, existing threads are reused if available. But if no free thread is available, a new one is created and added to the pool to complete the new task. 
	Threads that have been idle for longer than a timeout period will be removed automatically from the pool.



Read more: http://mrbool.com/working-with-java-executor-framework-in-multithreaded-application/27560#ixzz6FezCE1pP
	
	Two implementation of Interface: 
		1. ThreadPoolExecutor
		2. ScheduledThreadPoolExecutor
		
		
	Create instance using Factory class Executors:		
		ExecutorService executorService1 = Executors.newSingleThreadExecutor();
		ExecutorService executorService2 = Executors.newFixedThreadPool(10);
		ExecutorService executorService3 = Executors.newScheduledThreadPool(10);
		ExecutorService executorService4 = Executors.newCachedThreadPool();
		
	There are a few different ways to delegate tasks for execution to an ExecutorService:
		execute(Runnable)
		submit(Runnable) //returns null if the task has finished correctly.
		submit(Callable) 
		invokeAny(...)
		invokeAll(...)
		
	ExecutorService Shutdown:
		shutdown() -> The ExecutorService will not shut down immediately, but it will no longer accept new tasks, and once all threads have finished current tasks, 
					  the ExecutorService shuts down
		shutdownNow() -> This will attempt to stop all executing tasks right away, and skips all submitted but non-processed tasks. 
						 There are no guarantees given about the executing tasks. Perhaps they stop, perhaps the execute until the end.
		awaitTermination() -> method will block the thread calling it until either the ExecutorService has shutdown completely, or until a given time out occurs
		
		Example:
			executorService.shutdown();
			executorService.awaitTermination();



